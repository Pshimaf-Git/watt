// imports
import 'std.convert'

/*
 Library: math.
 |
 | implementation of: sin, cos, asin, acos
 | tan, atan, cat, sqrt, cbrt, root, log
 | pow, exp, log10, abs.
 |
 | natives implementation can be found in:
 | > crate::vm::natives::libs::natives_io
 */
unit math {
    /*
     Constants
    */
    pi := 3.141592
    e := 2.718281
    tau := 6.283185
    epsilon := 0.0000000001

    /*
     Abs (x)
    */
    fn abs(x) {
        if x < 0 {
            return -x
        }
        else {
            return x
        }
    }

    /*
     Floor (x)
    */
    fn floor(x) {
        i := convert.to_int(x)
        if x >= 0 or x == i {
            return i
        } else {
            return i - 1
        }
    }

    /*
     Ceil (x)
    */
    fn ceil(x) {
        i := convert.to_int(x)
        if x >= 0 or x == i {
            return i
        } else {
            return i + 1
        }
    }

    /*
     Round (x) in math way.
    */
    fn round(x) {
        i := convert.to_int(x)
        difference := self.abs(x - i)
        if difference >= 0.5 {
            return i + 1
        }
        else {
            return i
        }
    }

    /*
     Exp (x)
    */
    fn exp(x) {
        result := 1
        term := 1
        terms := 10
        for n in 1..terms {
            term *= x / n
            result += term
        }
        return result
    }

    /*
     Raise x to y power
    */
    fn pow(x, y) {
        if x == 0 {
            if y == 0 { return 1 }
            elif y < 0 { panic('could not raise 0 to negative power.', 'check your code.') }
            else { return 0 }
        }
        y_int := convert.to_int(y)
        if y == y_int {
            y = y_int
            result := 1
            for _ in 0..abs(y) {
                result *= x
            }
            if y >= 0 {
                return result
            } else {
                return 1 / result
            }
        }
        else {
            return exp(y * log(x))
        }
    }

    /*
     Sqrt of x by Newton algo.
    */
    fn sqrt(x) {
        if x < 0 {
            panic(
                'sqrt with negative number: ' + x,
                'sqrt can be used only with positive numbers.'
            )
        }
        if x == 0 { return 0 }

        guess := 1
        if x >= 2 {
            guess = x / 2
        }

        while true {
            new_guess := (guess + x / guess) * 0.5
            if abs(new_guess - guess) < epsilon {
                return new_guess
            }
            guess = new_guess
        }

        return guess
    }

    /*
     Cbrt of x by Newton algo.
    */
    fn cbrt(x) {
        if x < 0 {
            panic(
                'cbrt with negative number: ' + x,
                'cbrt can be used only with positive numbers.'
            )
        }
        if x == 0 { return 0 }

        guess := x
        if abs(x) >= 1 {
            guess = x / 3
        }

        while true {
            new_guess := (2 * guess + x / (guess * guess)) / 3
            if abs(new_guess - guess) < epsilon {
                return new_guess
            }
            guess = new_guess
        }

        return guess
    }

    /*
     xâˆšn by Newton algo.
    */
    fn root(x, n) {
        if n == 2 { return sqrt(x) }
        elif n == 3 { return cbrt(x) }
        else {
            if x <= 0 {
                panic(
                    'root with number <= 0: ' + x,
                    'sqrt can be used only with positive numbers > 0.'
                )
            }

            guess := 1
            if abs(x) >= 1 {
                guess = x / n
            }
            if guess == 0 {
                guess = 1
            }

            while true {
                new_guess := ((n - 1) * guess + x / pow(guess, (n-1))) / n
                if abs(new_guess - guess) < epsilon {
                    return new_guess
                }
                guess = new_guess
            }

            return guess
        }
    }

    /*
     Log (x)
    */
    fn log(x) {
        terms := 10
        if x <= 0 {
            panic(
                'log with number <= 0: ' + x,
                'you can use numbers > 0'
            )
        }
        k := 0
        while x > 2 {
            x /= self.e
            k += 1
        }
        while x < 0.5 {
            x *= self.e
            k -= 1
        }
        y := (x - 1) / (x + 1)
        y2 := pow(y, 2)
        result := 0
        for n in 0..terms {
            term := pow(y, (2 * n + 1)) / (2 * n + 1)
            result += term
        }
        return 2 * result + k
    }

    /*
     Log10 (x)
    */
    fn log10(x) {
        ln10 := 2.302585092994046
        return log(x) / ln10
    }

    /*
     Native trigonometrical fn-s
    */
    native sin -> 'math@sin'
    native cos -> 'math@cos'
    native tan -> 'math@tan'
    native ctg -> 'math@ctg'
    native atan -> 'math@atan'
    native asin -> 'math@asin'
    native acos -> 'math@acos'
    native tanh -> 'math@tanh'

    /*
     Radians to degrees
    */
    fn to_degrees(radians) {
        return radians * (180/self.pi)
    }

    /*
     Degrees to radians
    */
    fn to_radians(degrees) {
        return degrees * (self.pi/180)
    }

    /*
     Mean of list
    */
    fn mean(list) {
        sum := 0
        for value in list.iter() {
            sum += value
        }
        return sum / list.length()
    }

    /*
     Harmonic mean of list
    */
    fn hmean(list) {
        sum := 0
        for value in list.iter() {
            sum += 1.0 / value
        }
        return list.length() / sum
    }

    /*
     Median of list
    */
    fn median(list) {
        if list.length() % 2 == 0 {
            return mean([
                list.get(list.length() / 2),
                list.get(list.length() / 2 - 1)
            ])
        }
        else {
            return list.get(floor(list.length() / 2))
        }
    }

    /*
     Popularity of list
    */
    fn popularity(list) {
        popularity := {}
        for element in list.iter() {
            if popularity.has_key(element) {
                popularity.set(element, popularity.get(element) + 1)
            }
            else {
                popularity.set(element, 1)
            }
        }
        return popularity
    }

    /*
     Mode of list
    */
    fn mode(list) {
        popularity := popularity(list)
        greatest_popularity := 0
        result := null
        for key in popularity.keys().iter() {
            populartiy := popularity.get(key)
            if populartiy > greatest_popularity {
                greatest_popularity = populartiy
                result = key
            }
        }
        return result
    }
}
