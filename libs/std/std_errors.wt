/*
 Result type.
 | contains ok/err values, used
 | to work with errors and error propagation.
 | can contains ok or err at the same time.
 */
type Result(ok, err) {
    /*
     Result init,
     checks only one value is passed.
    */
    fn init {
        if self.ok != null and self.err != null {
            panic(
                'could not create result with (ok:'
                    + self.ok + ', err:' + self.err,
                'you can use only ok or err at the same time.'
            )
        }

        if self.ok == null and self.err == null {
            panic(
                'could not create result with both values are `null`',
                'if you\'re using `result.ok` or `result.err`, pass non-null value then.'
            )
        }

    }

    /*
     Returns true if Result is ok, else
     returns false
    */
    fn is_ok {
        return ok != null
    }

    /*
     Returns true if Result is err, else
     returns false
    */
    fn is_err {
        return err != null
    }

    /*
     Unwraps Result, if result is err,
     raises error, otherwise returns ok value
    */
    fn unwrap {
        if self.is_err() {
            panic(
                'unwrapping error result.',
                'error: ' + self.err
            )
        }
        else {
            return self.ok
        }
    }

    /*
     Unwraps Result, if result is ok,
     raises error, otherwise returns err value
    */
    fn unwrap_err {
        if self.is_ok() {
            panic(
                'unwrapping error, while result is ok.',
                'ok value: ' + self.ok
            )
        }
        else {
            return self.err
        }
    }

    /*
     Unwraps Result, if result is err,
     returns given value, otherwise
     returns ok value
    */
    fn unwrap_or(value) {
        if self.is_err() {
            return value
        }
        else {
            return self.ok
        }
    }

    /*
     Unwraps Result, if result is ok,
     returns given value, otherwise
     returns err value
    */
    fn unwrap_err_or(value) {
        if self.is_ok() {
            return value
        }
        else {
            return self.err
        }
    }
}

/*
 Result unit.
 | contains fast initializer
 | for Result type
*/
unit result {
    /*
     Result with ok value
    */
    fn ok(value) { return new Result(value, null) }

    /*
     Result with err value
    */
    fn err(err) { return new Result(null, err) }
}
