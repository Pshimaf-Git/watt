// imports
import 'std.errors'
import 'std.io'

/*
 File type.
 | implementation of: write, read_to_string,
 | close, seek, tell
 */
type File(raw_handle) {
    /*
     File initialization
     | by default is_open = true
    */
    fn init {
        self.is_open := true
    }

    /*
     Ensuring file is open
    */
    fn __ensure_open {
        if self.is_open == false {
            panic('Attempted to operate with closed file!')
        }
    }

    /*
     Writing data to file
    */
	fn write(data) {
        self.__ensure_open()

		write_result := fs.__internal_write(self.raw_handle, data)
		if write_result == 0 {
			return result.ok(true)
		}

		return result.err('could not write file (' + write_result + ')')
	}

    /*
     Close file
    */
    fn close {
        self.is_open = false
        self.raw_handle = null
    }

	/*
	 Read to string
	*/
    fn read_to_string {
        self.__ensure_open()

        data := fs.__internal_read_to_string(self.raw_handle)
        if data == null {
            return result.err('could not read file (1)')
        }

        return result.ok(data)
    }

    /*
     Seek
    */
    fn seek(position, whence) {
        fs.__internal_seek(self.raw_handle, position, whence)
    }

    /*
     Tell
    */
    fn tell() {
        return fs.__internal_tell(self.raw_handle)
    }
}

/*
 Library: fs.
 | implementation of __internal_*
 | can be found in
 | > crate::vm::natives::libs::natives_аы
*/
unit fs {
    /*
     Natives
    */
    native __internal_open -> 'fs@open'
    native __internal_create -> 'fs@create'
    native __internal_write -> 'fs@write'
    native __internal_seek -> 'fs@seek'
    native __internal_tell -> 'fs@tell'
    native __internal_read_to_string -> 'fs@read_to_string'
    native __internal_mkdir -> 'fs@mkdir'
    native __internal_delete_directory -> 'fs@delete_directory'
    native __internal_delete_directory_all -> 'fs@delete_directory_all'
    native __internal_list -> 'fs@list'
    native __internal_exists -> 'fs@exists'
    native __internal_is_directory -> 'fs@is_directory'

    /*
     Whence
    */

    // from start
    w_set := 0
    // from current
    w_current := 1
    // from end
    w_end := 2

    /*
     Creates file
    */
	fn create(filename) {
		file_handle := __internal_create(filename)

		if file_handle == null {
			return result.err('could not create file (1)')
		}

		return result.ok(new File(file_handle))
	}

    /*
     Opens file
    */
    fn open(filename) {
        file_handle := __internal_open(filename)

		if file_handle == null {
			return result.err('could not open file (1)')
		}

        return result.ok(new File(file_handle))
    }

    /*
     Creates directory
    */
    fn mkdir(dirname) {
        mkdir_result := __internal_mkdir(dirname)

		if mkdir_result != null {
            return result.err('could not create directory (' + mkdir_result + ')')
        }

        return result.ok(true)
    }

    /*
     Deletes empty directory
    */
    fn delete_directory(dirname) {
        delete_result := __internal_delete_directory(dirname)

		if delete_result != null {
            return result.err('could not delete directory (' + delete_result + ')')
        }

        return result.ok(true)
    }

    /*
     Deletes directory
    */
    fn delete_directory_all(dirname) {
        delete_result := __internal_delete_directory_all(dirname)

        if delete_result != null {
            return result.err('could not delete non-empty directory (' + delete_result + ')')
        }

        return result.ok(true)
    }

    /*
     Checks path existence
    */
    fn is_exists(path) {
        exists_result := __internal_exists(path)

        if exists_result != null {
            return result.err('could not check existence of path ' + path + '(0)')
        }

        return result.ok(exists_result)
    }

    /*
     Gets directory files list
    */
    fn list(path) {
        list_result := __internal_list(path)

        if list_result == null {
            return result.err('could not get list of files from ' + path + '(0)')
        }

        list := new List()
        list.internal = list_result

        return result.ok(list)
    }

    /*
     Checks is directory
    */
    fn is_directory(path) {
        result_is_dir := __internal_is_directory(path)

        if result_is_dir == null {
            return result.err('could not check path ' + path + ' is directory (0)')
        }

        return result.ok(result_is_dir)
    }
}
