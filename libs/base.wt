/*
 Display trait
 | guarantees the type has to_string
*/
trait Display {
    fn to_string
}

/*
 List utils
 | implementation of: add, set, get,
 | index_of, length, delete, to_string
 | can be found in:
 | > crate::vm::natives::libs::natives_list
*/
unit __list_utils {
    native make -> 'list@make'
    native add -> 'list@add'
    native set -> 'list@set'
    native get -> 'list@get'
    native index_of -> 'list@index_of'
    native length -> 'list@length'
    native delete -> 'list@delete'
    native delete_at -> 'list@delete_at'
}

/*
 List type.
 | implementation of: add, set, get, index_of,
 | length, delete, to_string
 | can be found in:
 | > list_utils unit
*/
type List impl Display {
    fn init {
        self.internal := __list_utils.make()
    }
    // adds value to list
    fn add(value) {
        __list_utils.add(self.internal, value)
    }
    // sets value by index in list
    fn set(index, value) {
        __list_utils.set(self.internal, index, value)
    }
    // deletes element from list
    fn delete(value) {
        __list_utils.delete(self.internal, value)
    }
    // deletes element from list at index
    fn delete_at(index) {
        __list_utils.delete_at(self.internal, index)
    }
    // gets length of list
    fn length {
        return __list_utils.length(self.internal)
    }
    // to_string
    fn to_string {
        string := '['
        for value in self.iter() {
            if is_instance(value) and value impls Display {
                string += value.to_string() + ','
            } else {
                string += value + ','
            }
        }
        string += ']'
        return string
    }
    // gets value by index
    fn get(index) {
        return __list_utils.get(self.internal, index)
    }
    // returns element if it exists at given `index`.
    // returns null otherwise.
    fn get_optional(index) {
        if index >= self.length() {
            return null
        } else {
            return self.get(index)
        }
    }
    // selects elements from index_start to the end of the list.
    // if index is invalid, an empty list is returned
    fn select_from(index_start) {
        new_list := new List()

        if index_start < 0 {
            return new_list
        }

        current_index := index_start
        while current_index < self.length() {
            new_list.add(self.get(current_index))
            current_index += 1
        }

        return new_list
    }
    fn iter {
        return new ListIterator(self)
    }
}

/*
 Iterator trait
 | provides to_list impl and
 | has_next, next fn-s.
*/
trait Iterator {
    fn has_next
    fn next
    fn to_list {
    	list := new List()

    	while self.has_next() {
    		list.add(self.next())
    	}

    	return list
    }
}

/*
 List iterator
 | iterates around list
*/
type ListIterator(list) impl Iterator {
    fn init {
        self.current := 0
    }
    // checks iterator has next value
    fn has_next {
        return self.current < self.list.length()
    }
    /*
     gets next iterator value
     if has_next returns false, raises error
    */
    fn next {
        if !self.has_next() {
            panic(
                'could not use next.',
                'iterator has no elements left.'
            )
        }
        value := self.list.get(self.current)
        self.current += 1
        return value
    }
}

/*
 Numbers iterator
 | iterates around numbers
*/
type NumbersIterator(start, end) impl Iterator {
    fn init {
        self._current := start
        self._end := end

        // 0 - backward
        // 1 - forward
        if self._current > self._end {
            self.direction := 1
        } else {
            self.direction := 0
        }
    }

    // checks iterator has next value
    fn has_next {
        if self.direction == 0 {
            return self._current < self._end
        } else {
            return self._current > self._end
        }
    }

    /*
     gets next iterator value
     if has_next returns false, raises error
    */
    fn next {
        if self.has_next() {
        } else {
            panic(
                'could not use next.',
                'iterator has no elements left.'
            )
        }
        
        value := self._current
        
        if self.direction == 0 {
            self._current += 1
        } else {
            self._current -= 1
        }

        return value
    }
}

/*
 Key/value pair for map.
*/
type Entry(key, value) impl Display {
    fn to_string {
        key_display := key
        value_display := value
        if is_instance(key) and key impls Display {
            key_display = key.to_string()
        }
        if is_instance(value) and value impls Display {
            value_display = value.to_string()
        }
        return '(' + key_display + ',' + value_display + ')'
    }
}

/*
 Map.
 | key/value dictionary.
*/
type Map impl Display {
    // entries
    entries := []

    // cheks has key
    fn has_key(key) {
        for entry in entries.iter() {
            if entry.key == key {
                return true
            }
        }
        return false
    }
    // cheks has value
    fn has_value(value) {
        for entry in entries.iter() {
            if entry.value == value {
                return true
            }
        }
        return false
    }
    // sets value by key
    fn set(key, value) {
        for entry in entries.iter() {
            if entry.key == key {
                entry.value = value
                return null
            }
        }
        entries.add(new Entry(
            key,
            value
        ))
    }
    // deletes entry by key
    fn delete(key) {
        to_delete := null
        for entry in entries.iter() {
            if entry.key == key {
                to_delete = entry
            }
        }

        if to_delete != null {
            entries.delete(to_delete)
            return true
        }
        else {
            return false
        }
    }
    // gets value by key
    fn get(key) {
        for entry in entries.iter() {
            if entry.key == key {
                return entry.value
            }
        }
    }
    // gets keys list
    fn keys {
        keys := []
        for entry in entries.iter() {
            keys.add(entry.key)
        }
        return keys
    }
    // gets values list
    fn values {
        values := []
        for entry in entries.iter() {
            keys.add(entry.value)
        }
        return values
    }
    // gets entries length
    fn length {
        return self.entries.length()
    }
    // to_string
    fn to_string {
        string := '['
        for entry in entries.iter() {
            string += entry.to_string()
        }
        string += ']'
        return string
    }
}

/*
 Panic fn
 | implementation can be found in:
 | > crate::vm::natives::libs::natives_base
*/
native panic -> 'base@panic'

/*
 Range fn
 | creates NumbersIterator from a to b
*/
fn _range(a, b) {
    return new NumbersIterator(a, b)
}

/*
 Returns name of value type
*/
native typeof -> 'base@typeof'

/*
 Returns full name of value type
*/
native full_typeof -> 'base@full_typeof'

/*
 Returns true, if given value is instance,
 otherwise returns false
*/
native is_instance -> 'base@is_instance'
